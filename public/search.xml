<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Security</title>
    <url>/2021/09/28/Spring%20Security/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="一-入门"><a href="#一-入门" class="headerlink" title="一.入门"></a>一.入门</h2><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h4><p>首先新建一个 <code>Spring Boot</code> 项目，创建时引入 <code>Spring Security</code> 依赖和 <code>Spring web</code> 依赖；</p>
<p>项目创建成功后，我们添加一个测试的 <code>HelloController</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControlle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接来启动项目,在项目启动过程中，我们会看到如下一行日志:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Using generated security password: fbc2d816-116c-<span class="number">4412</span>-83f9-eedf6de20480</span><br></pre></td></tr></table></figure>

<p>这就是 <code>Spring Security</code> 为默认用户 <code>user</code> 生成的临时密码，是一个 <code>UUID</code> 字符串.</p>
<p>接下来我们访问<code>localhost:8080/hello</code> 接口，就可以看到自动重定向到登录页面:</p>
<img src="D:\Fsn\Hexo\themes\next\source\images\mdImage\1.PNG" style="zoom:40%;" />

<p>在 <code>Spring Security</code> 中，默认的登录页面和登录接口，都是 <code>/login</code> ，只不过一个是 <code>get</code> 请求（登录页面），另一个是 <code>post</code> 请求（登录接口）.</p>
<p>查看源码在<code>org.springframework.boot.autoconfigure.security.servlet</code>包下有和用户相关的自动化配置类在 <code>UserDetailsServiceAutoConfiguration</code> 里边，在该类的 <code>getOrDeducePassword</code> 方法中:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">	logger.info(String.format(<span class="string">&quot;%n%nUsing generated security password: %s%n&quot;</span>, user.getPassword()));&#125;</span><br></pre></td></tr></table></figure>

<p>在控制台看到的日志就是从这里打印出来的。打印的条件是 <code>isPasswordGenerated</code>方法返回 <code>true</code>，即密码是默认生成的;</p>
<p>进而我们发现，<code>user.getPassword</code> 出现在 <code>SecurityProperties</code> 中，在 <code>SecurityProperties</code> 中我们看到如下定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name = <span class="string">&quot;user&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到，默认的用户名就是 <code>user</code>，默认的密码则是 <code>UUID</code>，而默认情况下，<code>passwordGenerated</code> 也为 <code>true</code>。</p>
<h4 id="2-用户配置"><a href="#2-用户配置" class="headerlink" title="2.用户配置"></a>2.用户配置</h4><p>在<code>SecurityProperties</code>中默认的用户就定义在它里边，是一个静态内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们如果要定义自己的用户名密码，必然是要去覆盖默认配置;</p>
<p>先来看下<code> SecurityProperties</code> 的定义:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityProperties</span> </span>&#123;..&#125;</span><br></pre></td></tr></table></figure>

<p>只需要以<code>spring.security.user</code>为前缀，去定义用户名密码即可:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.security.user.name=金闪闪</span><br><span class="line">spring.security.user.password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>在<code>application.properties</code>中定义的用户名密码最终是通过 <code>set</code> 方法注入到属性中去的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.passwordGenerated = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">this</span>.password = password;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>application</code>.properties 中定义的密码在注入进来之后，还顺便设置了 <code>passwordGenerated</code> 属性为 <code>false</code>，这个属性设置为<code>false</code>之后，控制台就不会打印默认的密码了.</p>
<h4 id="3-加密方案"><a href="#3-加密方案" class="headerlink" title="3.加密方案"></a>3.加密方案</h4><p>在 <code>Spring Security</code> 中，<code>BCryptPasswordEncoder</code> 就自带了盐，处理起来非常方便。<code>BCryptPasswordEncoder</code> 就是 <code>PasswordEncoder </code>接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCryptPasswordEncoder</span> <span class="keyword">implements</span> <span class="title">PasswordEncoder</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><code>PasswordEncoder</code> 这个接口中就定义了三个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String 							encodedPassword)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//encode 方法用来对明文密码进行加密，返回加密之后的密文。</span></span><br><span class="line"><span class="comment">//matches 方法是一个密码校对方法，在用户登录的时候，将用户传来的明文密码和数据库中保存的密文密码作为参数，传入到这个方法中去，根据返回的 Boolean 值判断用户密码是否输入正确。</span></span><br><span class="line"><span class="comment">//upgradeEncoding 是否还要进行再次加密，默认不用</span></span><br></pre></td></tr></table></figure>

<h4 id="4-加密配置"><a href="#4-加密配置" class="headerlink" title="4.加密配置"></a>4.加密配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">publicclass SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;金闪闪&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先我们自定义 SecurityConfig 继承自 WebSecurityConfigurerAdapter，重写里边的 configure 方法</span></span><br><span class="line"><span class="comment">//首先我们提供了一个 PasswordEncoder 的实例，因为目前的案例还比较简单，因此我暂时先不给密码进行加密，所以返回 NoOpPasswordEncoder 的实例即可</span></span><br><span class="line"><span class="comment">//configure方法中，我们通过inMemoryAuthentication 来开启在内存中定义用户，withUser中是用户名，password 中则是用户密码，roles 中是用户角色</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Alibab</title>
    <url>/2021/09/28/SpringCloud%20Alibab/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h4 id="SpringCloud-的几大痛点"><a href="#SpringCloud-的几大痛点" class="headerlink" title="SpringCloud 的几大痛点"></a>SpringCloud 的几大痛点</h4><ul>
<li> SpringCloud 部分组件停止维护和更新，给开发带来不便； </li>
<li> SpringCloud 部分环境搭建复杂，没有完善的可视化界面，我们需要大量的二次开发和定制 </li>
<li> SpringCloud 配置复杂，难以上手，部分配置差别难以区分和合理应用 </li>
</ul>
<h4 id="SpringCloud-Alibaba-的优势"><a href="#SpringCloud-Alibaba-的优势" class="headerlink" title="SpringCloud Alibaba 的优势"></a>SpringCloud Alibaba 的优势</h4><pre><code>     阿里使用过的组件经历了考验，性能强悍，设计合理，现在开源出来大家用 成套的产品搭配完善的可视化界面给开发运维带来极大的便利 搭建简单，学习曲线低。
</code></pre>
<h4 id="SpringCloud-Alibaba-的技术搭配方案"><a href="#SpringCloud-Alibaba-的技术搭配方案" class="headerlink" title="SpringCloud Alibaba 的技术搭配方案"></a>SpringCloud Alibaba 的技术搭配方案</h4><ul>
<li> SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）</li>
<li> SpringCloud Alibaba - Nacos：配置中心（动态配置管理）</li>
<li> SpringCloud - Ribbon：负载均衡 </li>
<li> SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）</li>
<li> SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断） </li>
<li> SpringCloud - Gateway：API 网关（webflux 编程模式） </li>
<li> SpringCloud - Sleuth：调用链监控 </li>
<li> SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方</li>
</ul>
<h4 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h4><ul>
<li><p>1.5.x 版本适用于 Spring Boot 1.5.x  </p>
</li>
<li><p>2.0.x 版本适用于 Spring Boot 2.0.x </p>
</li>
<li><p>2.1.x 版本适用于 Spring Boot 2.1.x</p>
</li>
</ul>
<p>​    </p>
<h4 id="项目中的依赖"><a href="#项目中的依赖" class="headerlink" title="项目中的依赖"></a>项目中的依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一-SpringCloud-Alibaba-Nacos-作为注册中心"><a href="#一-SpringCloud-Alibaba-Nacos-作为注册中心" class="headerlink" title="一.SpringCloud Alibaba-Nacos[作为注册中心]"></a>一.SpringCloud Alibaba-Nacos[作为注册中心]</h2><p>​        Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理 平台。他是使用 java 编写。需要依赖 java 环境 Nacos 文档地址： <a href="https://nacos.io/zh-cn/docs/quick-star">https://nacos.io/zh-cn/docs/quick-star</a></p>
<h4 id="下载-nacos-server"><a href="#下载-nacos-server" class="headerlink" title="下载 nacos-server"></a>下载 nacos-server</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/alibaba/nacos/releases</span><br></pre></td></tr></table></figure>

<h4 id="启动-nacos-server"><a href="#启动-nacos-server" class="headerlink" title="启动 nacos-server"></a>启动 nacos-server</h4><ul>
<li>双击 bin 中的 startup.cmd 文件 </li>
<li>访问 <a href="http://localhost:8848/nacos/">http://localhost:8848/nacos/</a> </li>
<li>使用默认的 nacos/naco</li>
</ul>
<h4 id="将微服务注册到-nacos-中"><a href="#将微服务注册到-nacos-中" class="headerlink" title="将微服务注册到 nacos 中"></a>将微服务注册到 nacos 中</h4><ul>
<li><p>修改 pom.xml 文件，引入 Nacos Discovery Starter。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在应用的 application.properties 配置文 件中配置 Nacos Server 地址</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gmall-coupon</span><br></pre></td></tr></table></figure></li>
<li><p>使用@EnableDiscoveryClient 开启服务注册发现功能</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GmallCouponApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GmallCouponApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动应用，观察 nacos 服务列表是否已经注册上服务</p>
<p>  <img src="D:\Fsn\Hexo\themes\next\source\images\mdImage\2.PNG"></p>
</li>
<li><p>注册更多的服务上去，测试使用 feign 远程调用</p>
</li>
</ul>
<h2 id="二-Feign-声明式远程调用"><a href="#二-Feign-声明式远程调用" class="headerlink" title="二.Feign 声明式远程调用"></a>二.Feign 声明式远程调用</h2><ul>
<li>​        Feign 是一个声明式的 HTTP 客户端，它的目的就是让远程调用更加简单。</li>
<li>​        Feign 提供了 HTTP 请求的模板，通过编写简单的接口和插入注解，就可以定义好 HTTP 请求的参数、格式、地 址等信息。</li>
<li>​        Feign 整合了 Ribbon（负载均衡）和 Hystrix(服务熔断)，可以让我们不再需要显式地使用这 两个组件。 </li>
<li>​        SpringCloudFeign 在 NetflixFeign 的基础上扩展了对 SpringMVC 注解的支持，在其实现下，我 们只需创建一个接口并用注解的方式来配置它，即可完成对服务提供方的接口绑定。简化了 SpringCloudRibbon 自行封装服务调用客户端的开发量</li>
</ul>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//（包 ：com.fsn.gmall.coupon.controller.CouponController）</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CouponService couponService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/member/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CouponEntity couponEntity=<span class="keyword">new</span> CouponEntity();</span><br><span class="line">        couponEntity.setCouponName(<span class="string">&quot;满100打9折&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>, Arrays.asList(couponEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明远程接口  （包：com.fsn.gmall.member.feign.CouponFeignService）</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;gmall-coupon&quot;)</span>  <span class="comment">//gmall-coupon：远程调用的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启 feign 功能</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.fsn.gmall.member.feign&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient()</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GmallMemeberApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GmallMemeberApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;member/member&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CouponFeignService couponFeignService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MemberEntity memberEntity=<span class="keyword">new</span> MemberEntity();</span><br><span class="line">        memberEntity.setNickname(<span class="string">&quot;金闪闪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        R memebrCoupons = couponFeignService.memberCoupons();</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;memebr&quot;</span>,memberEntity).put(<span class="string">&quot;coupons&quot;</span>,memebrCoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a><strong>坑</strong></h4><p>Feign调服务的时候，报的一个错误，完整错误如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">with name ‘com.wxd.openfeign.CouponOpenFeignService’: Unexpected exception during bean creation; nested exception is java.lang.IllegalStateException: No Feign Client <span class="keyword">for</span> loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</span><br></pre></td></tr></table></figure>

<p>原因是没有loadbalanc 但是nacos中ribbon会造成loadbalanc包失效，在common的pom加入这个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>SpringCloud Alibab</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7配置</title>
    <url>/2021/09/29/centos7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>centos7获取IP地址的方法主要有两种：</p>
<h4 id="动态获取ip"><a href="#动态获取ip" class="headerlink" title="动态获取ip"></a>动态获取ip</h4><p>修改网卡配置文件 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p> (最后一个为网卡名称)</p>
<p>动态获取IP地址需要修改两处地方即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bootproto=dhcp</span><br><span class="line">onboot=yes</span><br></pre></td></tr></table></figure>

<p>修改后按Esc -&gt; shift+:  输入wq保存重启一下网络服务即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<p>查看一下ip addr 就可以看到已经获取了IP地址</p>
<h4 id="配置静态IP地址"><a href="#配置静态IP地址" class="headerlink" title="配置静态IP地址"></a>配置静态IP地址</h4><p>修改网卡配置文件<code>vi /etc/sysconfig/network-scripts/ifcfg-ens32</code> (最后一个为网卡名称)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bootproto=static</span><br><span class="line">onboot=yes</span><br><span class="line">在最后加上几行，IP地址、子网掩码、网关、dns服务器</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.1.160</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=119.29.29.29</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure>

<p>重启网络服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<h4 id="解决ping百度不通的问题："><a href="#解决ping百度不通的问题：" class="headerlink" title="解决ping百度不通的问题："></a>解决ping百度不通的问题：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编辑——&gt;虚拟网络编辑器--&gt;NAT设置--&gt;记住这个网关IP；</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens32 编辑里面的GATEWAY；这两个网关是同一个IP</span><br></pre></td></tr></table></figure>



<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h4 id="1-卸载系统之前的-docker"><a href="#1-卸载系统之前的-docker" class="headerlink" title="1.卸载系统之前的 docker"></a>1.卸载系统之前的 docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="2-安装必须的依赖"><a href="#2-安装必须的依赖" class="headerlink" title="2.安装必须的依赖"></a>2.安装必须的依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h4 id="3-设置-docker-repo-的-yum-位置"><a href="#3-设置-docker-repo-的-yum-位置" class="headerlink" title="3.设置 docker repo 的 yum 位置"></a>3.设置 docker repo 的 yum 位置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h4 id="4-安装-docker，以及-docker-cli"><a href="#4-安装-docker，以及-docker-cli" class="headerlink" title="4.安装 docker，以及 docker-cli"></a>4.安装 docker，以及 docker-cli</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h4 id="5-启动-docker-并将其设置为开机启动"><a href="#5-启动-docker-并将其设置为开机启动" class="headerlink" title="5.启动 docker;并将其设置为开机启动"></a>5.启动 docker;并将其设置为开机启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h4 id="6-配置-docker-镜像加速"><a href="#6-配置-docker-镜像加速" class="headerlink" title="6.配置 docker 镜像加速"></a>6.配置 docker 镜像加速</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://wv9ylvrk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>通过 <strong>uname -r</strong> 命令查看你当前的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r   </span><br></pre></td></tr></table></figure>

<p>查看docker版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p>启动 Docker 服务;并将其设置为开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure>

<p>列出镜像列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>卸载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker*</span><br></pre></td></tr></table></figure>

<p>查看安装过的包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure>

<p>删除安装的Docker相关的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove docker.x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;https://wv9ylvrk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="docker中安装mysql"><a href="#docker中安装mysql" class="headerlink" title="docker中安装mysql"></a>docker中安装mysql</h2><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="2-mysql"><a href="#2-mysql" class="headerlink" title="2.mysql"></a>2.mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="进入容器查看配置："><a href="#进入容器查看配置：" class="headerlink" title="进入容器查看配置："></a>进入容器查看配置：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<h4 id="4-重启mysql"><a href="#4-重启mysql" class="headerlink" title="4.重启mysql"></a>4.重启mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h4 id="5-设置启动docker时，即运行mysql"><a href="#5-设置启动docker时，即运行mysql" class="headerlink" title="5.设置启动docker时，即运行mysql"></a>5.设置启动docker时，即运行mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure>

<p>进入mysql交互模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="docker中安装redis"><a href="#docker中安装redis" class="headerlink" title="docker中安装redis"></a>docker中安装redis</h2><h4 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<h4 id="2-创建实例并启动"><a href="#2-创建实例并启动" class="headerlink" title="2.创建实例并启动"></a>2.创建实例并启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p> 连接到docker的redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure>

<h4 id="3-设置redis容器在docker启动的时候启动"><a href="#3-设置redis容器在docker启动的时候启动" class="headerlink" title="3.设置redis容器在docker启动的时候启动"></a>3.设置redis容器在docker启动的时候启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start redis</span><br><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装dubbo</title>
    <url>/2021/09/28/linux%E5%AE%89%E8%A3%85dubbo/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><p>先卸载jdk原始版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep jdk</span><br><span class="line">rpm -e --nodeps</span><br></pre></td></tr></table></figure>

<p>上传文件并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt </span><br><span class="line">ll</span><br><span class="line"><span class="built_in">cd</span> jdk1.8.0_152</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">在最后添加如下配置:</span><br><span class="line">JAVA_HOME=/opt/jdk1.8.0_152</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure>

<p>输入source /etc/profile使文件临时生效</p>
<p>永久生效：reboot</p>
<h4 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h4><p>上传文件并解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# tar -zxvf zookeeper-3.4.11.tar.gz</span><br></pre></td></tr></table></figure>

<p>重命名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv zookeeper-3.4.11 zookeeper</span><br></pre></td></tr></table></figure>

<p> 进入解压之后的目录找conf 进行拷贝</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd zookeeper/</span><br><span class="line">cd conf/</span><br><span class="line">ll</span><br><span class="line">vi zoo_sample.cfg</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">cd ../bin/</span><br></pre></td></tr></table></figure>

<p>启动  进入bin目录执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./zkServer.sh start</span><br><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep zookeeper</span><br></pre></td></tr></table></figure>

<h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><p>上传解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.24.tar.gz</span><br></pre></td></tr></table></figure>

<p>改名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv apache-tomcat-8.5.24 tomcat8</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd tomcat8/bin/     </span><br><span class="line">./startup.sh     访问：localhost:8080   或 远程访问：ip:8080</span><br><span class="line">ps -ef | grep tomcat8</span><br></pre></td></tr></table></figure>

<p>关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<h4 id="安装一个监控中心"><a href="#安装一个监控中心" class="headerlink" title="安装一个监控中心"></a>安装一个监控中心</h4><p>dubbo 监控中心实质：是一个 xxx.war包 动态web 工程</p>
<p>把监控中心放入tomcat中webapps 目录下，此时会自动解压！前提条件是：tomcat 启动！<br>把tomcat 关掉  在关闭的时候，一定要注意不能报错！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./shutdown.sh </span><br></pre></td></tr></table></figure>

<p>将tomcat 中webapps 中的dubbo-admin-2.6.0.war 删掉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf dubbo-admin-2.6.0.war</span><br></pre></td></tr></table></figure>

<p>修改名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv dubbo-admin-2.6.0 dubbo-admin</span><br></pre></td></tr></table></figure>

<p>重启tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../bin/</span><br><span class="line">./startup.sh </span><br></pre></td></tr></table></figure>

<p>访问http://虚拟机远程IP:8080/dubbo-admin/ 输入用户名，密码 root root</p>
]]></content>
      <categories>
        <category>dubbo</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>并行垃圾收集器(The Parallel Garbage Collector)</title>
    <url>/2021/09/28/%E5%B9%B6%E8%A1%8C%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%20-%20Java/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="并行垃圾收集器-GC-之所以如此命名，是因为它可以利用多个线程来处理-GC-任务，它提供了-OpenJDK-上可用的最高-GC-吞吐量"><a href="#并行垃圾收集器-GC-之所以如此命名，是因为它可以利用多个线程来处理-GC-任务，它提供了-OpenJDK-上可用的最高-GC-吞吐量" class="headerlink" title="并行垃圾收集器 (GC) 之所以如此命名，是因为它可以利用多个线程来处理 GC 任务，它提供了 OpenJDK 上可用的最高 GC 吞吐量"></a>并行垃圾收集器 (GC) 之所以如此命名，是因为它可以利用多个线程来处理 GC 任务，它提供了 OpenJDK 上可用的最高 GC 吞吐量</h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h2 id="使用并行-GC："><a href="#使用并行-GC：" class="headerlink" title="使用并行 GC："></a>使用并行 GC：</h2><h4 id="可以使用-VM-参数启用并行-GC-。如前所述，并行-GC-提供了-OpenJDK-上可用-GC-的最高吞吐量；串行-GC、G1-GC-和-Z-GC，但这确实是以暂停时间和内存占用为代价的。因此，在决定使用-Parallel-GC-时要考虑这些影响。-XX-UseParallel-GC"><a href="#可以使用-VM-参数启用并行-GC-。如前所述，并行-GC-提供了-OpenJDK-上可用-GC-的最高吞吐量；串行-GC、G1-GC-和-Z-GC，但这确实是以暂停时间和内存占用为代价的。因此，在决定使用-Parallel-GC-时要考虑这些影响。-XX-UseParallel-GC" class="headerlink" title="可以使用 VM 参数启用并行 GC 。如前所述，并行 GC 提供了 OpenJDK 上可用 GC 的最高吞吐量；串行 GC、G1 GC 和 Z GC，但这确实是以暂停时间和内存占用为代价的。因此，在决定使用 Parallel GC 时要考虑这些影响。-XX:+UseParallel GC"></a>可以使用 VM 参数启用并行 GC 。如前所述，并行 GC 提供了 OpenJDK 上可用 GC 的最高吞吐量；串行 GC、G1 GC 和 Z GC，但这确实是以暂停时间和内存占用为代价的。因此，在决定使用 Parallel GC 时要考虑这些影响。<code>-XX:+UseParallel GC</code></h4><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5><h2 id="调整并行-GC："><a href="#调整并行-GC：" class="headerlink" title="调整并行 GC："></a>调整并行 GC：</h2><h4 id="调整并行-GC-的选项有很多；需要考虑的几个关键选项如下："><a href="#调整并行-GC-的选项有很多；需要考虑的几个关键选项如下：" class="headerlink" title="调整并行 GC 的选项有很多；需要考虑的几个关键选项如下："></a>调整并行 GC 的选项有很多；需要考虑的几个关键选项如下：</h4><ul>
<li><code>MaxPauseTimeMillis</code>：这向 GC 提供了一个提示，即暂停时间应小于提供的数量。没有为此标志设置默认值。</li>
<li><code>GCTimeRatio</code>：这设置了执行 GC 工作和应用程序工作之间花费的时间比率。默认值设置为 1 到 99。</li>
<li><code>Parallel GCThreads</code>：这设置可用于执行 GC 工作的线程数。默认值基于从可用系统资源确定的 HotSpot 人体工程学。请参阅下面的链接。</li>
<li><code>+UseStringDeduplication</code>：在 JDK 18 中，字符串重复数据删除已从 G1 GC 移植到 Parallel GC。启用字符串重复数据删除可以将内存占用减少约 10%，但可能会影响暂停时间</li>
</ul>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>redis常用数据类型和持久化</title>
    <url>/2022/08/11/redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="redis常用数据类型："><a href="#redis常用数据类型：" class="headerlink" title="redis常用数据类型："></a>redis常用数据类型：</h5><p>string  字符串  字符串最大存储容量512M</p>
<p>list 可以重复</p>
<p>set 不可重复</p>
<p>hash  类似Map&lt;string,string&gt;</p>
<p>zset </p>
<h5 id="为什么Redis需要把所有数据放到内存中"><a href="#为什么Redis需要把所有数据放到内存中" class="headerlink" title="为什么Redis需要把所有数据放到内存中"></a>为什么Redis需要把所有数据放到内存中</h5><p>为了达到最快读写速度将数据读到内存中，并通过异步的方式将数据写到磁盘；</p>
<p>如果设置了最大使用内存，数据已有记录数达到内存限值后不能继续插入新值</p>
<h5 id="Redis提供了哪几种持久化方式"><a href="#Redis提供了哪几种持久化方式" class="headerlink" title="Redis提供了哪几种持久化方式"></a>Redis提供了哪几种持久化方式</h5><p>RDB持久化：每隔一段时间将内存中的数据集写到磁盘</p>
<p>​                     redis会单独创建一个子进程来进行持久化，会将数据先保存到临时文件，待持久化过程结束后，用这个临时文件替换上次持久化好的文件，整个过程主线程不进行IO操作</p>
<p>​                  保存策略：</p>
<p>​                        save 300 10  300秒内如果至少有10个key的值变化，则保存</p>
<p>AOF持久化：以日志形式记录每个更新操作</p>
<p>​                redis重新启动时读取这个文件，重新执行新建，修改数据的命令恢复数据</p>
<p>​                保存策略：</p>
<p>​                        appendfsync always: 每次产生一条新的修改命令都执行保存操作</p>
<p>​                        appendfsync everysec: 每秒执行一次保存操作   默认</p>
<p>​                        appendfsync no:从不保存                    </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>整合mybatis-plus</title>
    <url>/2021/09/28/%E6%95%B4%E5%90%88mybatis-plus/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="1-导入依赖："><a href="#1-导入依赖：" class="headerlink" title="1.导入依赖："></a>1.导入依赖：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><h5 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h5><h6 id="导入数据库驱动"><a href="#导入数据库驱动" class="headerlink" title="导入数据库驱动"></a>导入数据库驱动</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在application.yml文件配置数据源信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/gmall-pms</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h5 id="配置mybatis-plus"><a href="#配置mybatis-plus" class="headerlink" title="配置mybatis-plus"></a>配置mybatis-plus</h5><p>使用@MapperScan注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.fsn.gmall.product.dao&quot;)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>页面松校验</title>
    <url>/2021/09/28/%E9%A1%B5%E9%9D%A2%E6%9D%BE%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="pom文件增加依赖："><a href="#pom文件增加依赖：" class="headerlink" title="pom文件增加依赖："></a>pom文件增加依赖：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--松校验--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xml-apis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xml-apis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>batik-ext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h5 id="在application-properties中配置-："><a href="#在application-properties中配置-：" class="headerlink" title="在application.properties中配置 ："></a>在application.properties中配置 ：</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false  </span></span><br><span class="line"><span class="meta">spring.thymeleaf.mode</span>=<span class="string">LEGACYHTML5</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>pom</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/09/28/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="一-类加载器"><a href="#一-类加载器" class="headerlink" title="一. 类加载器"></a>一. 类加载器</h3><h5 id="1-类的加载"><a href="#1-类的加载" class="headerlink" title="1.类的加载:"></a>1.类的加载:</h5><p>​        当我们的程序在运行后，第一次使用某个类的时候，会将此类的class文件读取到内存，并将此类 的所有信息存储到一个Class对象中</p>
<h5 id="2-类的加载时机"><a href="#2-类的加载时机" class="headerlink" title="2.类的加载时机"></a>2.类的加载时机</h5><ul>
<li>创建类的实例。 </li>
<li>类的静态变量，或者为静态变量赋值。 </li>
<li>类的静态方法。 </li>
<li> 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象。 </li>
<li>初始化某个类的子类。 </li>
<li>直接使用java.exe命令来运行某个主类。 </li>
</ul>
<p>以上六种情况的任何一种，都可以导致JVM将一个类加载到方法区。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 类的加载时机</span></span><br><span class="line"><span class="comment">// 1. 创建类的实例。</span></span><br><span class="line"><span class="comment">// Student stu = new Student();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2. 类的静态变量，或者为静态变量赋值。</span></span><br><span class="line"><span class="comment">// Person.country = &quot;中国&quot;;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3. 类的静态方法。</span></span><br><span class="line"><span class="comment">// Person.method();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 4. 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象。</span></span><br><span class="line"><span class="comment">// Class&lt;?&gt; c = Class.forName(&quot;com.fsn.demo1_类的加载.Student&quot;);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 5. 初始化某个类的子类。</span></span><br><span class="line"><span class="comment">// Zi zi = new Zi();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 6. 直接使用java.exe命令来运行某个主类。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-类加载器："><a href="#3-类加载器：" class="headerlink" title="3.类加载器："></a>3.类加载器：</h5><p>是负责将磁盘上的某个class文件读取到内存并生成Class的对象</p>
<p>Java中有三种类加载器，它们分别用于加载不同种类的class：</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：用于加载系统类库\bin目录下的 class，例如：rt.jar。 </li>
<li> 扩展类加载器(Extension ClassLoader)：用于加载扩展类库\lib\ext目录下的 class。 </li>
<li>应用程序类加载器(Application ClassLoader)：用于加载我们自定义类的加载器。</li>
</ul>
<p>如何获取类加载器:  类的字节码对象.<code>getClassLoader()</code></p>
<h3 id="二-反射"><a href="#二-反射" class="headerlink" title="二. 反射"></a>二. 反射</h3><p>问题：IDEA中的对象是怎么知道类有哪些属性，哪些方法的呢</p>
<p>​        通过反射技术对象类进行了解剖得到了类的所有成员</p>
<h5 id="1-反射的概念"><a href="#1-反射的概念" class="headerlink" title="1.反射的概念"></a>1.反射的概念</h5><p>​        反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方 法，构造方法)</p>
<p>​        使用反射操作类成员的前提要获得该类字节码文件对象，就是Class对象</p>
<h5 id="2-反射在实际开发中的应用"><a href="#2-反射在实际开发中的应用" class="headerlink" title="2.反射在实际开发中的应用"></a>2.反射在实际开发中的应用</h5><ul>
<li>开发IDE(集成开发环境)，比如IDEA,Eclipse </li>
<li>各种框架的设计和学习 比如Spring，Hibernate，Struct，Mybaits….</li>
</ul>
<h5 id="3-Class对象的获取方式"><a href="#3-Class对象的获取方式" class="headerlink" title="3.Class对象的获取方式"></a>3.Class对象的获取方式</h5><ul>
<li>通过类名.class获得 </li>
<li>通过对象名.getClass()方法获得 </li>
<li>通过Class类的静态方法获得： static Class forName(“类全名”)</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.方式一:通过类名.class获得</span></span><br><span class="line">        Class&lt;Student&gt; c1 = Student.class;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.方式二:通过对象名.getClass()方法获得</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;? extends Student&gt; c2 = stu.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.方式三:通过Class类的静态方法获得： static Class forName(&quot;类全名&quot;)</span></span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">&quot;com.fsn.demo2_Class对象的获取.Student&quot;</span>);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        <span class="comment">// 问题:一个类只有一个字节码对象(Class对象)</span></span><br><span class="line">        System.out.println(c1 == c2);<span class="comment">// true</span></span><br><span class="line">        System.out.println(c1 == c3);<span class="comment">// true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getSimpleName</span><span class="params">()</span></span>; 获得类名字符串：类名</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>; 获得类全名：包名+类名</span><br><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">()</span> </span>; 创建Class对象关联类的对象</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获得Class对象</span></span><br><span class="line">    Class c = Student.class;</span><br><span class="line">    <span class="comment">// 获得类名字符串：类名</span></span><br><span class="line">    System.out.println(c.getSimpleName());</span><br><span class="line">    <span class="comment">// 获得类全名：包名+类名</span></span><br><span class="line">    System.out.println(c.getName());</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Student stu = (Student) c.newInstance();</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-通过反射获取类的构造方法"><a href="#4-通过反射获取类的构造方法" class="headerlink" title="4.通过反射获取类的构造方法"></a>4.通过反射获取类的构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Constructor相关的方法</span><br><span class="line"><span class="number">1.</span> <span class="function">Constructor <span class="title">getConstructor</span><span class="params">(Class... parameterTypes)</span></span></span><br><span class="line"><span class="function">* 根据参数类型获得对应的Constructor对象。</span></span><br><span class="line"><span class="function">* 只能获得<span class="keyword">public</span>修饰的构造方法</span></span><br><span class="line"><span class="function">2. Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class... parameterTypes)</span></span></span><br><span class="line"><span class="function">* 根据参数类型获得对应的Constructor对象</span></span><br><span class="line"><span class="function">* 可以是<span class="keyword">public</span>、<span class="keyword">protected</span>、<span class="params">(默认)</span>、<span class="keyword">private</span>修饰符的构造方法。</span></span><br><span class="line"><span class="function">3. Constructor[] <span class="title">getConstructors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获得类中的所有构造方法对象，只能获得<span class="keyword">public</span>的</span></span><br><span class="line"><span class="function">4. Constructor[] <span class="title">getDeclaredConstructors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获得类中的所有构造方法对象</span></span><br><span class="line"><span class="function">可以是<span class="keyword">public</span>、<span class="keyword">protected</span>、<span class="params">(默认)</span>、<span class="keyword">private</span>修饰符的构造方法。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h5 id="5-通过反射执行构造方法"><a href="#5-通过反射执行构造方法" class="headerlink" title="5.通过反射执行构造方法"></a>5.通过反射执行构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor对象常用方法</span><br><span class="line"><span class="number">1.</span> <span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span></span></span><br><span class="line"><span class="function">根据指定的参数创建对象</span></span><br><span class="line"><span class="function">2. <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">设置&quot;暴力反射&quot;——是否取消权限检查，<span class="keyword">true</span>取消权限检查，<span class="keyword">false</span>表示不取消</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个构造方法</span></span><br><span class="line">    <span class="comment">// 获取无参数的构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con1 = c.getDeclaredConstructor();</span><br><span class="line">    System.out.println(con1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取满参构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con2 = c.getDeclaredConstructor(String.class,</span><br><span class="line">    <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(con2);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取私有构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con3 = c.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(con3);</span><br><span class="line">    System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有构造方法</span></span><br><span class="line">    Constructor&lt;?&gt;[] arr1 = c.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; con : arr1) &#123;</span><br><span class="line">    System.out.println(con);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con1表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu1 = con1.newInstance();</span><br><span class="line">    System.out.println(stu1);<span class="comment">// Student&#123;name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con2表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu2 = con2.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    System.out.println(stu2);<span class="comment">// Student&#123;name=&#x27;张三&#x27;, age=18&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消con3表示的构造方法的权限检查</span></span><br><span class="line">    con3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con3表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu3 = con3.newInstance(<span class="number">19</span>);</span><br><span class="line">    System.out.println(stu3);<span class="comment">// Student&#123;name=&#x27;null&#x27;, age=19&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-通过反射获取类的成员方法"><a href="#6-通过反射获取类的成员方法" class="headerlink" title="6.通过反射获取类的成员方法"></a>6.通过反射获取类的成员方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Method相关的方法</span><br><span class="line">    <span class="function">Method <span class="title">getMethod</span><span class="params">(String name,Class...args)</span></span>;</span><br><span class="line">    根据方法名和参数类型获得对应的构造方法对象，只能获得<span class="keyword">public</span>的</span><br><span class="line">   </span><br><span class="line">    <span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name,Class...args)</span></span>;</span><br><span class="line">    根据方法名和参数类型获得对应的构造方法对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line">    </span><br><span class="line">    Method[] getMethods();</span><br><span class="line">    获得类中的所有成员方法对象，返回数组，只能获得<span class="keyword">public</span>修饰的且包含父类的</span><br><span class="line">    </span><br><span class="line">    Method[] getDeclaredMethods();</span><br><span class="line">    获得类中的所有成员方法对象，返回数组,只获得本类的，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、</span><br><span class="line">    <span class="keyword">private</span>的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="7-通过反射执行成员方法"><a href="#7-通过反射执行成员方法" class="headerlink" title="7.通过反射执行成员方法"></a>7.通过反射执行成员方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method对象常用方法</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">    调用指定对象obj的该方法</span></span><br><span class="line"><span class="function">    args：调用方法时传递的参数</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    设置&quot;暴力访问&quot;——是否取消权限检查，<span class="keyword">true</span>取消权限检查，<span class="keyword">false</span>表示不取消</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show1 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show2 方法...num: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show3 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show4</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show1 方法...str: &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show5</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show5 方法...num: &quot;</span> + num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个方法</span></span><br><span class="line">    <span class="comment">// 通过反射获取show1方法</span></span><br><span class="line">    Method m1 = c.getDeclaredMethod(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    System.out.println(m1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show2方法</span></span><br><span class="line">    Method m2 = c.getDeclaredMethod(<span class="string">&quot;show2&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(m2);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show3方法</span></span><br><span class="line">    Method m3 = c.getDeclaredMethod(<span class="string">&quot;show3&quot;</span>);</span><br><span class="line">    System.out.println(m3);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show4方法</span></span><br><span class="line">    Method m4 = c.getDeclaredMethod(<span class="string">&quot;show4&quot;</span>, String.class);</span><br><span class="line">    System.out.println(m4);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show5方法</span></span><br><span class="line">    Method m5 = c.getDeclaredMethod(<span class="string">&quot;show5&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(m5);</span><br><span class="line">    System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有方法</span></span><br><span class="line">    Method[] arr = c.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : arr) &#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射创建Student对象</span></span><br><span class="line">    Student stu = c.newInstance();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m1表示的show1方法</span></span><br><span class="line">    m1.invoke(stu);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m2表示的show2方法</span></span><br><span class="line">    m2.invoke(stu,<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消m3表示的方法的权限检查</span></span><br><span class="line">    m3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m3表示的show3方法</span></span><br><span class="line">    m3.invoke(stu);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消m4表示的方法的权限检查</span></span><br><span class="line">    m4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m4表示的show4方法</span></span><br><span class="line">    m4.invoke(stu,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m5表示的show5方法</span></span><br><span class="line">    Object res = m5.invoke(stu, <span class="number">20</span>);<span class="comment">// int res = stu.show5(20);</span></span><br><span class="line">    System.out.println(res);<span class="comment">// 100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-扩展反射操作成员方法案例"><a href="#8-扩展反射操作成员方法案例" class="headerlink" title="8.扩展反射操作成员方法案例"></a>8.扩展反射操作成员方法案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Method类:</span></span><br><span class="line"><span class="comment">    public String getName() 获取方法名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 需求: 访问Student类中的成员</span></span><br><span class="line">    <span class="comment">// 1.获取该类的字节码对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">    <span class="comment">// 2.获取所有构造方法</span></span><br><span class="line">    Constructor&lt;?&gt;[] cons = c.getDeclaredConstructors();</span><br><span class="line">    <span class="comment">// 3.遍历所有的构造方法</span></span><br><span class="line">    Student stu = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; con : cons) &#123;</span><br><span class="line">    stu = (Student) con.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.获取所有的成员方法</span></span><br><span class="line">    Method[] methods = c.getDeclaredMethods();</span><br><span class="line">    <span class="comment">// 5.遍历所有的成员方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show1&quot;</span>))&#123;</span><br><span class="line">    m.invoke(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show2&quot;</span>))&#123;</span><br><span class="line">    m.invoke(stu,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show5&quot;</span>))&#123;</span><br><span class="line">    Object res = m.invoke(stu, <span class="number">20</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="9-通过反射操作成员变量"><a href="#9-通过反射操作成员变量" class="headerlink" title="9.通过反射操作成员变量"></a>9.通过反射操作成员变量</h5><p>通过反射获取类的成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Field相关的方法</span><br><span class="line">* <span class="function">Field <span class="title">getField</span><span class="params">(String name)</span></span>;</span><br><span class="line">* 根据成员变量名获得对应Field对象，只能获得<span class="keyword">public</span>修饰</span><br><span class="line">* <span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span>;</span><br><span class="line">* 根据成员变量名获得对应Field对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line">* Field[] getFields();</span><br><span class="line">* 获得所有的成员变量对应的Field对象，只能获得<span class="keyword">public</span>的</span><br><span class="line">* Field[] getDeclaredFields();</span><br><span class="line">* 获得所有的成员变量对应的Field对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过反射访问成员变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field对象常用方法</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setInt</span><span class="params">(Object obj, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLong</span><span class="params">(Object obj, <span class="keyword">long</span> l)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBoolean</span><span class="params">(Object obj, <span class="keyword">boolean</span> z)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDouble</span><span class="params">(Object obj, <span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLong</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(Object ob)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span>;暴力反射，设置为可以直接访问私有类型的属性。</span><br><span class="line"><span class="function">Class <span class="title">getType</span><span class="params">()</span></span>; 获取属性的类型，返回Class对象。</span><br><span class="line"><span class="comment">//setXxx方法都是给对象obj的属性设置使用，针对不同的类型选取不同的方法。</span></span><br><span class="line"><span class="comment">//getXxx方法是获取对象obj对应的属性值的，针对不同的类型选取不同的方法。</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">    Student stu = c.newInstance();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个的成员变量</span></span><br><span class="line">    <span class="comment">// 通过反射获取name成员变量</span></span><br><span class="line">    Field f1 = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(f1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取age成员变量</span></span><br><span class="line">    Field f2 = c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(f2);</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有成员变量</span></span><br><span class="line">    Field[] arr = c.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : arr) &#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取f1表示的name属性的类型</span></span><br><span class="line">    System.out.println(f1.getType());</span><br><span class="line">    <span class="comment">// 获取f2表示的age属性的类型</span></span><br><span class="line">    System.out.println(f2.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射给f1表示的name属性赋值</span></span><br><span class="line">    f1.set(stu,<span class="string">&quot;张三&quot;</span> );<span class="comment">// 相当于stu.name=&quot;张三&quot;;</span></span><br><span class="line">    <span class="comment">// 取消f2表示的属性的权限检查</span></span><br><span class="line">    f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 通过反射给f2表示的age属性赋值</span></span><br><span class="line">    f2.set(stu,<span class="number">18</span> );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过反射获取f1表示的name属性的值</span></span><br><span class="line">    System.out.println(f1.get(stu));<span class="comment">// 张三</span></span><br><span class="line">    <span class="comment">// 通过反射获取f2表示的age属性的值</span></span><br><span class="line">    System.out.println(f2.get(stu));<span class="comment">// 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
</search>
