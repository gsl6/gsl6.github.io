<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascripts进阶</title>
    <url>/2021/09/26/javascripts%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul>
<li>单例模式    <ul>
<li>饿汉式</li>
<li>懒汉式</li>
</ul>
</li>
<li>多例模式</li>
<li>枚举<ul>
<li>定义枚举</li>
<li>使用枚举</li>
</ul>
</li>
<li>工厂模式</li>
<li>Lombok插件</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出单例设计模式的好处</li>
<li><input disabled="" type="checkbox"> 能够说出多例模式的好处</li>
<li><input disabled="" type="checkbox"> 能够定义枚举</li>
<li><input disabled="" type="checkbox"> 能够使用工厂模式编写java程序</li>
</ul>
<h1 id="第一章-单例设计模式"><a href="#第一章-单例设计模式" class="headerlink" title="第一章 单例设计模式"></a>第一章 单例设计模式</h1><h2 id="知识点–-单例设计模式的概述"><a href="#知识点–-单例设计模式的概述" class="headerlink" title="知识点– 单例设计模式的概述"></a>知识点– 单例设计模式的概述</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>正常情况下一个类可以创建多个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 默认生成一个公共的空参构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 正常情况下一个类可以创建多个对象</span></span><br><span class="line">	Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是有些时候的某些类, 我们希望只能创建单一的一个对象, 这时候我们需要使用到单例设计模式, 下面我们来介绍一下单例设计模式.</p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><ul>
<li>单例设计模式的作用</li>
<li>单例设计模式实现步骤</li>
<li>单例设计模式的类型</li>
</ul>
<h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h3><h4 id="单例设计模式的作用"><a href="#单例设计模式的作用" class="headerlink" title="单例设计模式的作用"></a>单例设计模式的作用</h4><p>单例模式，是一种常用的软件设计模式。<strong>通过单例模式可以保证系统中，应用该模式的这个类只有一个实例</strong>。即一个类只有一个对象实例。</p>
<h4 id="单例设计模式实现步骤"><a href="#单例设计模式实现步骤" class="headerlink" title="单例设计模式实现步骤"></a>单例设计模式实现步骤</h4><ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li>
<li>在该类内部产生一个唯一的实例化对象</li>
<li>定义一个静态方法返回这个唯一对象。</li>
</ol>
<h4 id="例设计模式的类型"><a href="#例设计模式的类型" class="headerlink" title="例设计模式的类型"></a>例设计模式的类型</h4><p>根据实例化对象的时机单例设计模式又分为以下两种:</p>
<ol>
<li>饿汉单例设计模式</li>
<li>懒汉单例设计模式</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>略</p>
<h2 id="知识点–-饿汉式单例设计模式"><a href="#知识点–-饿汉式单例设计模式" class="headerlink" title="知识点– 饿汉式单例设计模式"></a>知识点– 饿汉式单例设计模式</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握单例设计模式的书写</li>
</ul>
<h3 id="路径-1"><a href="#路径-1" class="headerlink" title="路径"></a>路径</h3><ul>
<li>单例设计模式 — 饿汉式</li>
</ul>
<h3 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h3><p>饿汉单例设计模式就是使用类的时候已经将对象创建完毕，不管以后会不会使用到该实例化对象，先创建了再说。很着急的样子，故被称为“饿汉模式”。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用饿汉式单例设计模式: 比较着急,不管要不要获取我这个类的对象,先创建了该对象再说</span></span><br><span class="line">    <span class="comment">// 1. 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在该类内部产生一个唯一的实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义一个静态方法返回这个唯一对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = Person.getInstance();</span><br><span class="line">        Person p2 = Person.getInstance();</span><br><span class="line">        Person p3 = Person.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        System.out.println(p3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>略</p>
<h2 id="知识点–-懒汉式单例设计模式"><a href="#知识点–-懒汉式单例设计模式" class="headerlink" title="知识点– 懒汉式单例设计模式"></a>知识点– 懒汉式单例设计模式</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握懒汉式单例设计模式的书写</li>
</ul>
<h3 id="路径-2"><a href="#路径-2" class="headerlink" title="路径"></a>路径</h3>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/2021/09/26/vue/</url>
    <content><![CDATA[<p>&lt;! –more–&gt;</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>springboots2</title>
    <url>/2021/09/26/springboots2/</url>
    <content><![CDATA[<p>&lt;! –more–&gt;</p>
]]></content>
      <categories>
        <category>javajichu</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2021/09/26/java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="day17-【单例模式、多例模式、枚举、工厂模式】"><a href="#day17-【单例模式、多例模式、枚举、工厂模式】" class="headerlink" title="day17 【单例模式、多例模式、枚举、工厂模式】"></a>day17 【单例模式、多例模式、枚举、工厂模式】</h1><span id="more"></span>

<h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul>
<li>单例模式    <ul>
<li>饿汉式</li>
<li>懒汉式</li>
</ul>
</li>
<li>多例模式</li>
<li>枚举<ul>
<li>定义枚举</li>
<li>使用枚举</li>
</ul>
</li>
<li>工厂模式</li>
<li>Lombok插件</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够说出单例设计模式的好处</li>
<li><input disabled="" type="checkbox"> 能够说出多例模式的好处</li>
<li><input disabled="" type="checkbox"> 能够定义枚举</li>
<li><input disabled="" type="checkbox"> 能够使用工厂模式编写java程序</li>
</ul>
<h1 id="第一章-单例设计模式"><a href="#第一章-单例设计模式" class="headerlink" title="第一章 单例设计模式"></a>第一章 单例设计模式</h1><h2 id="知识点–-单例设计模式的概述"><a href="#知识点–-单例设计模式的概述" class="headerlink" title="知识点– 单例设计模式的概述"></a>知识点– 单例设计模式的概述</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>正常情况下一个类可以创建多个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 默认生成一个公共的空参构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 正常情况下一个类可以创建多个对象</span></span><br><span class="line">	Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是有些时候的某些类, 我们希望只能创建单一的一个对象, 这时候我们需要使用到单例设计模式, 下面我们来介绍一下单例设计模式.</p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><ul>
<li>单例设计模式的作用</li>
<li>单例设计模式实现步骤</li>
<li>单例设计模式的类型</li>
</ul>
<h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h3><h4 id="单例设计模式的作用"><a href="#单例设计模式的作用" class="headerlink" title="单例设计模式的作用"></a>单例设计模式的作用</h4><p>单例模式，是一种常用的软件设计模式。<strong>通过单例模式可以保证系统中，应用该模式的这个类只有一个实例</strong>。即一个类只有一个对象实例。</p>
<h4 id="单例设计模式实现步骤"><a href="#单例设计模式实现步骤" class="headerlink" title="单例设计模式实现步骤"></a>单例设计模式实现步骤</h4><ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li>
<li>在该类内部产生一个唯一的实例化对象</li>
<li>定义一个静态方法返回这个唯一对象。</li>
</ol>
<h4 id="例设计模式的类型"><a href="#例设计模式的类型" class="headerlink" title="例设计模式的类型"></a>例设计模式的类型</h4><p>根据实例化对象的时机单例设计模式又分为以下两种:</p>
<ol>
<li>饿汉单例设计模式</li>
<li>懒汉单例设计模式</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>略</p>
<h2 id="知识点–-饿汉式单例设计模式"><a href="#知识点–-饿汉式单例设计模式" class="headerlink" title="知识点– 饿汉式单例设计模式"></a>知识点– 饿汉式单例设计模式</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握单例设计模式的书写</li>
</ul>
<h3 id="路径-1"><a href="#路径-1" class="headerlink" title="路径"></a>路径</h3><ul>
<li>单例设计模式 — 饿汉式</li>
</ul>
<h3 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h3><p>饿汉单例设计模式就是使用类的时候已经将对象创建完毕，不管以后会不会使用到该实例化对象，先创建了再说。很着急的样子，故被称为“饿汉模式”。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用饿汉式单例设计模式: 比较着急,不管要不要获取我这个类的对象,先创建了该对象再说</span></span><br><span class="line">    <span class="comment">// 1. 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在该类内部产生一个唯一的实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义一个静态方法返回这个唯一对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = Person.getInstance();</span><br><span class="line">        Person p2 = Person.getInstance();</span><br><span class="line">        Person p3 = Person.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        System.out.println(p3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>略</p>
<h2 id="知识点–-懒汉式单例设计模式"><a href="#知识点–-懒汉式单例设计模式" class="headerlink" title="知识点– 懒汉式单例设计模式"></a>知识点– 懒汉式单例设计模式</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握懒汉式单例设计模式的书写</li>
</ul>
<h3 id="路径-2"><a href="#路径-2" class="headerlink" title="路径"></a>路径</h3><ul>
<li>单例设计模式 — 懒汉式</li>
</ul>
<h3 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h3><p>懒汉单例设计模式就是调用getInstance()方法时实例才被创建，先不急着实例化出对象，等要用的时候才实例化出对象。不着急，故称为“懒汉模式”。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 懒汉式单例: 不着急,只要当你调用了getInstance静态方法获取对象的时候,就创建,其他时候不创建</span></span><br><span class="line">    <span class="comment">// 1. 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在该类内部产生一个唯一的实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Person p ;<span class="comment">// 默认值为null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义一个静态方法返回这个唯一对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建Person类的唯一对象</span></span><br><span class="line">        <span class="comment">// 判断一下,如果p这个成语变量的值为null,就创建,不为null,说明该对象已经创建了,直接返回即可</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = <span class="keyword">new</span> Person();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = Person.getInstance();</span><br><span class="line">        Person p2 = Person.getInstance();</span><br><span class="line">        Person p3 = Person.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        System.out.println(p3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：懒汉单例设计模式在多线程环境下可能会实例化出多个对象，不能保证单例的状态，所以加上关键字：synchronized，保证其同步安全。</p>
</blockquote>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>单例模式可以保证系统中一个类只有一个对象实例。</p>
<p>实现单例模式的步骤：</p>
<ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li>
<li>在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型的成员变量。</li>
<li>定义一个静态方法返回这个唯一对象。</li>
</ol>
<h1 id="第二章-多例设计模式"><a href="#第二章-多例设计模式" class="headerlink" title="第二章 多例设计模式"></a>第二章 多例设计模式</h1><h2 id="知识点–多例设计模式"><a href="#知识点–多例设计模式" class="headerlink" title="知识点–多例设计模式"></a>知识点–多例设计模式</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握多例设计模式的书写</li>
</ul>
<h3 id="路径-3"><a href="#路径-3" class="headerlink" title="路径"></a>路径</h3><ul>
<li>多例设计模式的作用</li>
<li>实现步骤</li>
<li>实现代码</li>
<li>测试结果</li>
</ul>
<h3 id="讲解-3"><a href="#讲解-3" class="headerlink" title="讲解"></a>讲解</h3><h4 id="多例设计模式的作用"><a href="#多例设计模式的作用" class="headerlink" title="多例设计模式的作用"></a>多例设计模式的作用</h4><p>多例模式，是一种常用的软件设计模式。通过多例模式可以保证系统中，应用该模式的类有<strong>固定数量</strong>的实例。多例类要自我创建并管理自己的实例，还要向外界提供获取本类实例的方法。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>​    1.创建一个类,  将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</p>
<p>​    2.在该类内部产生固定数量的实例化对象 —-&gt; 集合</p>
<p>​    3.提供一个静态方法来随机获取一个该类的实例化对象</p>
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用多例设计模式: 保证程序运行期间该类只有固定数量的对象产生</span></span><br><span class="line">    <span class="comment">// 1.创建一个类,  将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在该类内部产生固定数量的实例化对象 ----&gt; 集合  只能产生依次固定数量的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 定义一个存放该类对象的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 在静态代码块中,创建固定数量的对象,添加到集合中</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 创建固定数量的该类对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            list.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提高一个静态方法来随机获取一个该了的实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 随机产生一个list集合的索引</span></span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(list.size());<span class="comment">// [0,3) 0,1,2</span></span><br><span class="line">        <span class="comment">// 根据索引获取对象</span></span><br><span class="line">        Person p = list.get(index);</span><br><span class="line">        <span class="comment">// 返回对象</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Person p1 = Person.getInstance();</span><br><span class="line">            System.out.println(p1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200517120844827.png" alt="image-20200517120844827"></p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>多例模式可以保证系统中一个类有固定个数的实例, 在实现需求的基础上, 能够提高实例的复用性.</p>
<p>实现多例模式的步骤：</p>
<ol>
<li>创建一个类,  将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li>
<li>在类中定义存放类实例的list集合</li>
<li>在类中提供静态代码块,在静态代码块中创建类的实例</li>
<li>提供获取类实例的静态方法</li>
</ol>
<h1 id="第四章-枚举"><a href="#第四章-枚举" class="headerlink" title="第四章 枚举"></a>第四章 枚举</h1><h2 id="知识点–枚举的概述和定义"><a href="#知识点–枚举的概述和定义" class="headerlink" title="知识点–枚举的概述和定义"></a>知识点–枚举的概述和定义</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><ul>
<li>掌握枚举的定义和使用</li>
</ul>
<h3 id="路径-4"><a href="#路径-4" class="headerlink" title="路径"></a>路径</h3><ul>
<li>引入不使用枚举存在的问题</li>
<li>枚举的概述</li>
<li>枚举的定义</li>
<li>枚举的使用</li>
</ul>
<h3 id="讲解-4"><a href="#讲解-4" class="headerlink" title="讲解"></a>讲解</h3><h4 id="不使用枚举存在的问题"><a href="#不使用枚举存在的问题" class="headerlink" title="不使用枚举存在的问题"></a>不使用枚举存在的问题</h4><p>假设我们要定义一个人类，人类中包含姓名和性别。通常会将性别定义成字符串类型，效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 省略get/set/toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 因为性别是字符串,所以我们可以传入任意字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不使用枚举存在的问题：可以给性别传入任意的字符串，导致性别是非法的数据，不安全。</p>
<h4 id="枚举的概念"><a href="#枚举的概念" class="headerlink" title="枚举的概念"></a>枚举的概念</h4><p>   枚举是一种引用数据类型,java中的枚举是有固定个数对象的”特殊类”。如果有些类的对象是固定个数的，就可以定义成枚举。比如性别,季节，方向。</p>
<h4 id="定义枚举的格式"><a href="#定义枚举的格式" class="headerlink" title="定义枚举的格式"></a>定义枚举的格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> 枚举名 </span>&#123;</span><br><span class="line">    <span class="comment">// 第一行都是罗列枚举实例,这些枚举实例直接写大写名字即可。</span></span><br><span class="line">    实例,实例,实例,...；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">   BOY, GIRL; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span>&#123; </span><br><span class="line">    UP, RIGHT, DOWN, LEFT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="枚举的使用"><a href="#枚举的使用" class="headerlink" title="枚举的使用"></a>枚举的使用</h4><ol>
<li>定义枚举：BOY表示男，GIRL表示女</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY, GIRL; <span class="comment">// 男，女</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Perosn中的性别有String类型改为Sex枚举类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略get/set/toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用是只能传入枚举中的固定值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用枚举格式: 枚举类型.枚举值</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.BOY);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.GIRL);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;abc&quot;</span>);<span class="comment">// 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">枚举定义:</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> 枚举名</span>&#123;</span><br><span class="line">        枚举值,枚举值,枚举值,...</span><br><span class="line">    &#125;</span><br><span class="line">枚举的使用:</span><br><span class="line">	枚举类型 变量名 = 枚举名.枚举值;</span><br></pre></td></tr></table></figure>



<h2 id="知识点–枚举的其他内容-听听就好"><a href="#知识点–枚举的其他内容-听听就好" class="headerlink" title="知识点–枚举的其他内容( 听听就好)"></a>知识点–枚举的其他内容( 听听就好)</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><ul>
<li>了解枚举的其他内容</li>
</ul>
<h3 id="路径-5"><a href="#路径-5" class="headerlink" title="路径"></a>路径</h3><h3 id="讲解-5"><a href="#讲解-5" class="headerlink" title="讲解"></a>讲解</h3><p>枚举的本质是一个使用了多例设计模式的类，所以枚举中还可以有成员变量，成员方法等。</p>
<p>枚举的本质是一个类，我们刚才定义的Sex枚举最终效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY, GIRL; <span class="comment">// 男，女</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY(<span class="number">18</span>), GIRL(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Sex(<span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄是: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.BOY);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.GIRL);</span><br><span class="line"></span><br><span class="line">        Sex.BOY.showAge();</span><br><span class="line">        Sex.GIRL.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果：</p>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/1566701678583.png" alt="1566701678583"></p>
<h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><ul>
<li>略</li>
</ul>
<h1 id="第五章-工厂设计模式"><a href="#第五章-工厂设计模式" class="headerlink" title="第五章 工厂设计模式"></a>第五章 工厂设计模式</h1><h2 id="知识点–-工厂模式的概述"><a href="#知识点–-工厂模式的概述" class="headerlink" title="知识点– 工厂模式的概述"></a>知识点– 工厂模式的概述</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><ul>
<li>工厂模式其实就是用来帮我们创建对象的, 那么它到底有哪些特点, 我们来学习一下.</li>
</ul>
<h3 id="路径-6"><a href="#路径-6" class="headerlink" title="路径"></a>路径</h3><ul>
<li>工厂模式的介绍</li>
<li>工厂模式的作用</li>
<li>案例演示</li>
</ul>
<h3 id="讲解-6"><a href="#讲解-6" class="headerlink" title="讲解"></a>讲解</h3><h4 id="工厂模式的介绍"><a href="#工厂模式的介绍" class="headerlink" title="工厂模式的介绍"></a>工厂模式的介绍</h4><p>​    工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式<strong>属于创建型模式</strong>，它提供了一种创建对象的最佳方式。之前我们创建类对象时, 都是使用new 对象的形式创建, 除new 对象方式以外, 工厂模式也可以创建对象.</p>
<p>耦合度: 类与类之间的关系,如果关系比较强,高耦合,  如果关系比较弱,低耦合,而<strong>开发是要尽量低耦合</strong></p>
<p>10个类:</p>
<p>10个测试类:  每个测试类都要创建这10个类的对象</p>
<p>以前: 直接在测试类中通过new 来创建     这10个测试类和这10个类关系起来</p>
<p>工厂模式: 定义一个类,专门用来创建这10个类的对象, 并提供获取的方法,那这个时候测试类只需要跟工厂类关联  低耦合</p>
<h4 id="工厂模式的作用"><a href="#工厂模式的作用" class="headerlink" title="工厂模式的作用"></a>工厂模式的作用</h4><p>将前端代码与要创建的对象分开，前端不需要直接创建对象，也就不需要关心创建对象时需要的数据。只需要通过工厂获取对象即可。     </p>
<ul>
<li>解决类与类之间的耦合问题</li>
</ul>
<h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><ol>
<li>编写一个Car接口, 提供run方法</li>
<li>编写一个Falali类实现Car接口,重写run方法</li>
<li>编写一个Benchi类实现Car接口,重写run方法</li>
</ol>
<p>提供一个工厂类,可以用来生产汽车对象</p>
<h5 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h5><p>1.编写一个Car接口, 提供run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.编写一个Falali类实现Car接口,重写run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Falali</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;法拉利以每小时500公里的速度在奔跑.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写一个Benchi类实现Car接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benchi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰汽车以每秒1米的速度在挪动.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.提供一个CarFactory(汽车工厂),用于生产汽车对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id : 车的标识</span></span><br><span class="line"><span class="comment">     *           benchi : 代表需要创建Benchi类对象</span></span><br><span class="line"><span class="comment">     *           falali : 代表需要创建Falali类对象</span></span><br><span class="line"><span class="comment">     *           如果传入的车标识不正确,代表当前工厂生成不了当前车对象,则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;falali&quot;</span>.equals(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Falali();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;benchi&quot;</span>.equals(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benchi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.定义CarFactoryTest测试汽车工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarFactory carFactory = <span class="keyword">new</span> CarFactory();</span><br><span class="line">        Car benchi = carFactory.createCar(<span class="string">&quot;benchi&quot;</span>);</span><br><span class="line">        benchi.run();</span><br><span class="line">        Car falali = carFactory.createCar(<span class="string">&quot;falali&quot;</span>);</span><br><span class="line">        falali.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><ul>
<li>工厂模式的存在可以改变创建类的对象的方式,解决类与类之间的耦合.</li>
</ul>
<h1 id="第六章-Lombok【自学扩展】"><a href="#第六章-Lombok【自学扩展】" class="headerlink" title="第六章 Lombok【自学扩展】"></a>第六章 Lombok【自学扩展】</h1><h2 id="知识点–-Lombok的使用"><a href="#知识点–-Lombok的使用" class="headerlink" title="知识点– Lombok的使用"></a>知识点– Lombok的使用</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><ul>
<li>能够使用Lombok</li>
</ul>
<h3 id="路径-7"><a href="#路径-7" class="headerlink" title="路径"></a>路径</h3><ul>
<li> lombok介绍</li>
<li> lombok使用</li>
</ul>
<h3 id="讲解-7"><a href="#讲解-7" class="headerlink" title="讲解"></a>讲解</h3><p> lombok介绍</p>
<ul>
<li> lombok可以使用注解的方式让一些代码变的简洁 方便</li>
<li> 实体类中有一些固定的代码：构造方法，getter/setter、equals、hashcode、toString方法都是固定的，写出来看着比较麻烦。而Lombok能通过注解的方式，在编译时自动为属性生成这些代码。</li>
</ul>
<p> lombok使用</p>
<p>​    1. 添加lombox的jar包：</p>
<p>​        将lombok.jar(本例使用版本：1.18.10)，添加到模块目录下，并添加到ClassPath</p>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232059055.png" alt="image-20200516232059055"></p>
<p>​    2. 为IDEA添加lombok插件（<strong>连接网络使用）</strong></p>
<ul>
<li>第一步</li>
</ul>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232559924.png" alt="image-20200516232559924"></p>
<ul>
<li>第二步：</li>
</ul>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232640969.png" alt="image-20200516232640969"></p>
<ul>
<li>第三步：</li>
</ul>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232706997.png" alt="image-20200516232706997"></p>
<ul>
<li>第四步：</li>
</ul>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232729955.png" alt="image-20200516232729955"></p>
<ol>
<li><p><strong>安装完毕后，重启IDEA。</strong></p>
</li>
<li><p>新建一个类：Student</p>
<p><img src="D:/Study/项目/黑猫/java基础/day17_单例-多例-枚举-工厂模式/day17_单例-多例-枚举-工厂模式/01_笔记/imgs/image-20200516232800944.png" alt="image-20200516232800944"></p>
</li>
</ol>
<h4 id="lombok常用注解"><a href="#lombok常用注解" class="headerlink" title="lombok常用注解"></a>lombok常用注解</h4><ul>
<li><p>@Getter和@Setter</p>
<ul>
<li>作用：生成成员变量的get和set方法。</li>
<li>写在成员变量上，指对当前成员变量有效。</li>
<li>写在类上，对所有成员变量有效。</li>
<li>注意：静态成员变量无效。</li>
</ul>
</li>
<li><p>@ToString：</p>
<ul>
<li>作用：生成toString()方法。</li>
<li>该注解只能写在类上。</li>
</ul>
</li>
<li><p>@NoArgsConstructor和@AllArgsConstructor</p>
<ul>
<li>@NoArgsConstructor：无参数构造方法。</li>
<li>@AllArgsConstructor：满参数构造方法。</li>
<li>注解只能写在类上。</li>
</ul>
</li>
<li><p>@EqualsAndHashCode</p>
<ul>
<li>作用：生成hashCode()和equals()方法。</li>
<li>注解只能写在类上。</li>
</ul>
</li>
<li><p>@Data</p>
<ul>
<li><p>作用： 生成setter/getter、equals、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。 </p>
</li>
<li><p>注解只能写在类上。</p>
</li>
</ul>
</li>
</ul>
<h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>略</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">必须练习:</span><br><span class="line">	<span class="number">1.</span>单例设计模式</span><br><span class="line">    <span class="number">2.</span>多例设计模式</span><br><span class="line">    <span class="number">3.</span>枚举的定义和使用</span><br><span class="line">    <span class="number">4.</span>工厂设计模式</span><br><span class="line">        </span><br><span class="line">- 能够说出单例设计模式的好处</span><br><span class="line">   作用:保证使用该模式的类只有一个对象产生</span><br><span class="line">   步骤:</span><br><span class="line">	<span class="number">1.</span>将构造方法私有化</span><br><span class="line">    <span class="number">2.</span>在类的内部创建该类的唯一对象</span><br><span class="line">    <span class="number">3.</span>提供一个静态方法用来获取该类的唯一对象</span><br><span class="line">        </span><br><span class="line">- 能够说出多例模式的好处</span><br><span class="line">   作用:保证使用该模式的类只有固定数量个对象产生</span><br><span class="line">   步骤:</span><br><span class="line">	<span class="number">1.</span>将构造方法私有化</span><br><span class="line">    <span class="number">2.</span>在类的内部创建该类的固定数量个对象</span><br><span class="line">    <span class="number">3.</span>提供一个静态方法用来获取该类的对象</span><br><span class="line">        </span><br><span class="line">- 能够定义枚举</span><br><span class="line">   格式:</span><br><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> 枚举名</span>&#123;</span><br><span class="line">            枚举值,枚举值,...</span><br><span class="line">        &#125;</span><br><span class="line">   使用:</span><br><span class="line">		枚举类型 变量名 = 枚举名.枚举值;</span><br><span class="line"></span><br><span class="line">- 能够使用工厂模式编写java程序</span><br><span class="line">   作用:用来创建对象,实现对类的解耦操作</span><br><span class="line">   步骤:</span><br><span class="line">		<span class="number">1.</span>创建一个工厂类</span><br><span class="line">        <span class="number">2.</span>在工厂类中提供一个静态方法</span><br><span class="line">        <span class="number">3.</span>在静态方法中,创建对象,并返回(返回值类型多态)</span><br></pre></td></tr></table></figure>

<h1 id="扩展-动态代理"><a href="#扩展-动态代理" class="headerlink" title="扩展-动态代理"></a>扩展-动态代理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo8_动态代理加强;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>：pengzhilin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/27 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            对Collection接口进行代理，以前的remove(Object obj)方法是删除集合中第一次出现的元素</span></span><br><span class="line"><span class="comment">            (比如集合中有多个“abc”,调用remove(“abc”)后只会删除一个元素)。</span></span><br><span class="line"><span class="comment">            代理后，要求在调用remove(Object obj)方法后，能够删除集合中所有匹配的元素。【动态代理】</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建ArrayList集合</span></span><br><span class="line">        Collection&lt;String&gt; col = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;bac&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除前:&quot;</span> + col);<span class="comment">// 删除前:[abc, abc, bac, abc, abc, abc]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态代理增强remove方法</span></span><br><span class="line">        Collection&lt;String&gt; proxy = (Collection&lt;String&gt;) Proxy.newProxyInstance(col.getClass().getClassLoader(), col.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    invoke方法:</span></span><br><span class="line"><span class="comment">                        参数1proxy:表示生成的代理对象,一般不用</span></span><br><span class="line"><span class="comment">                        参数2method:表示代理对象调用的方法</span></span><br><span class="line"><span class="comment">                        参数3args:表示代理对象调用方法传入的实际参数</span></span><br><span class="line"><span class="comment">                        返回值:表示代理对象调用方法的返回值</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 代理对象调用方法就会来到这里,所以增强方法的代码就写在这,就可以了</span></span><br><span class="line">                <span class="comment">// 被代理对象执行一次代理对象调用的方法,来确定返回值  删除一个</span></span><br><span class="line"></span><br><span class="line">                Object res = method.invoke(col, args);<span class="comment">// col.remove(&quot;abc&quot;)  col.toArray();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;remove&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 删除剩余的</span></span><br><span class="line">                    <span class="comment">// 获取col集合对象的迭代器</span></span><br><span class="line">                    Iterator&lt;String&gt; it = col.iterator();</span><br><span class="line">                    <span class="comment">// 使用迭代器进行遍历</span></span><br><span class="line">                    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">// 在循环中,判断遍历出来的元素是否是要删除的元素</span></span><br><span class="line">                        String e = it.next();</span><br><span class="line">                        <span class="keyword">if</span> (e.equals(args[<span class="number">0</span>])) &#123;</span><br><span class="line">                            <span class="comment">// 如果是,就删除</span></span><br><span class="line">                            it.remove();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;toArray&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;增强toArray方法...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理对象删除元素</span></span><br><span class="line">        <span class="keyword">boolean</span> res = proxy.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(res);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除后:&quot;</span> + col);<span class="comment">// 删除后:[bac]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object[] arr = proxy.toArray();</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 集合对象删除元素</span></span><br><span class="line"><span class="comment">        boolean res = col.remove(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(res);// true</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;删除后:&quot;+col);// 删除后:[abc, bac, abc, abc, abc]*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
