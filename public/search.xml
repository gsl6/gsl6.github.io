<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>centos7配置</title>
    <url>/2021/09/29/centos7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id="centos7配置IP地址"><a href="#centos7配置IP地址" class="headerlink" title="centos7配置IP地址"></a>centos7配置IP地址</h2><p>centos7获取IP地址的方法主要有两种：</p>
<h4 id="动态获取ip"><a href="#动态获取ip" class="headerlink" title="动态获取ip"></a>动态获取ip</h4><p>修改网卡配置文件 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p> (最后一个为网卡名称)</p>
<p>动态获取IP地址需要修改两处地方即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bootproto=dhcp</span><br><span class="line">onboot=yes</span><br></pre></td></tr></table></figure>

<p>修改后按Esc -&gt; shift+:  输入wq保存重启一下网络服务即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<p>查看一下ip addr 就可以看到已经获取了IP地址</p>
<h4 id="配置静态IP地址"><a href="#配置静态IP地址" class="headerlink" title="配置静态IP地址"></a>配置静态IP地址</h4><p>修改网卡配置文件<code>vi /etc/sysconfig/network-scripts/ifcfg-ens32</code> (最后一个为网卡名称)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bootproto=static</span><br><span class="line">onboot=yes</span><br><span class="line">在最后加上几行，IP地址、子网掩码、网关、dns服务器</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.1.160</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">DNS1=119.29.29.29</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure>

<p>重启网络服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

<h4 id="解决ping百度不通的问题："><a href="#解决ping百度不通的问题：" class="headerlink" title="解决ping百度不通的问题："></a>解决ping百度不通的问题：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编辑——&gt;虚拟网络编辑器--&gt;NAT设置--&gt;记住这个网关IP；</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens32 编辑里面的GATEWAY；这两个网关是同一个IP</span><br></pre></td></tr></table></figure>



<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h4 id="1-卸载系统之前的-docker"><a href="#1-卸载系统之前的-docker" class="headerlink" title="1.卸载系统之前的 docker"></a>1.卸载系统之前的 docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="2-安装必须的依赖"><a href="#2-安装必须的依赖" class="headerlink" title="2.安装必须的依赖"></a>2.安装必须的依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h4 id="3-设置-docker-repo-的-yum-位置"><a href="#3-设置-docker-repo-的-yum-位置" class="headerlink" title="3.设置 docker repo 的 yum 位置"></a>3.设置 docker repo 的 yum 位置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h4 id="4-安装-docker，以及-docker-cli"><a href="#4-安装-docker，以及-docker-cli" class="headerlink" title="4.安装 docker，以及 docker-cli"></a>4.安装 docker，以及 docker-cli</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h4 id="5-启动-docker-并将其设置为开机启动"><a href="#5-启动-docker-并将其设置为开机启动" class="headerlink" title="5.启动 docker;并将其设置为开机启动"></a>5.启动 docker;并将其设置为开机启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h4 id="6-配置-docker-镜像加速"><a href="#6-配置-docker-镜像加速" class="headerlink" title="6.配置 docker 镜像加速"></a>6.配置 docker 镜像加速</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://wv9ylvrk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>通过 <strong>uname -r</strong> 命令查看你当前的内核版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r   </span><br></pre></td></tr></table></figure>

<p>查看docker版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p>启动 Docker 服务;并将其设置为开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker.service</span><br><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure>

<p>列出镜像列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>卸载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker*</span><br></pre></td></tr></table></figure>

<p>查看安装过的包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed | grep docker</span><br></pre></td></tr></table></figure>

<p>删除安装的Docker相关的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y remove docker.x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;https://wv9ylvrk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="docker中安装mysql"><a href="#docker中安装mysql" class="headerlink" title="docker中安装mysql"></a>docker中安装mysql</h2><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="2-mysql"><a href="#2-mysql" class="headerlink" title="2.mysql"></a>2.mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h4 id="进入容器查看配置："><a href="#进入容器查看配置：" class="headerlink" title="进入容器查看配置："></a>进入容器查看配置：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<h4 id="4-重启mysql"><a href="#4-重启mysql" class="headerlink" title="4.重启mysql"></a>4.重启mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h4 id="5-设置启动docker时，即运行mysql"><a href="#5-设置启动docker时，即运行mysql" class="headerlink" title="5.设置启动docker时，即运行mysql"></a>5.设置启动docker时，即运行mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update mysql --restart=always</span><br></pre></td></tr></table></figure>

<p>进入mysql交互模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h2 id="docker中安装redis"><a href="#docker中安装redis" class="headerlink" title="docker中安装redis"></a>docker中安装redis</h2><h4 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure>

<h4 id="2-创建实例并启动"><a href="#2-创建实例并启动" class="headerlink" title="2.创建实例并启动"></a>2.创建实例并启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/redis/conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /mydata/redis/conf/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">-v/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p> 连接到docker的redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure>

<h4 id="3-设置redis容器在docker启动的时候启动"><a href="#3-设置redis容器在docker启动的时候启动" class="headerlink" title="3.设置redis容器在docker启动的时候启动"></a>3.设置redis容器在docker启动的时候启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start redis</span><br><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>centos7/docker</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/09/28/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p><em><span id="more"></span></em></p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="一-类加载器"><a href="#一-类加载器" class="headerlink" title="一. 类加载器"></a>一. 类加载器</h3><h5 id="1-类的加载"><a href="#1-类的加载" class="headerlink" title="1.类的加载:"></a>1.类的加载:</h5><p>​        当我们的程序在运行后，第一次使用某个类的时候，会将此类的class文件读取到内存，并将此类 的所有信息存储到一个Class对象中</p>
<h5 id="2-类的加载时机"><a href="#2-类的加载时机" class="headerlink" title="2.类的加载时机"></a>2.类的加载时机</h5><ul>
<li>创建类的实例。 </li>
<li>类的静态变量，或者为静态变量赋值。 </li>
<li>类的静态方法。 </li>
<li> 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象。 </li>
<li>初始化某个类的子类。 </li>
<li>直接使用java.exe命令来运行某个主类。 </li>
</ul>
<p>以上六种情况的任何一种，都可以导致JVM将一个类加载到方法区。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 类的加载时机</span></span><br><span class="line"><span class="comment">// 1. 创建类的实例。</span></span><br><span class="line"><span class="comment">// Student stu = new Student();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2. 类的静态变量，或者为静态变量赋值。</span></span><br><span class="line"><span class="comment">// Person.country = &quot;中国&quot;;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3. 类的静态方法。</span></span><br><span class="line"><span class="comment">// Person.method();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 4. 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象。</span></span><br><span class="line"><span class="comment">// Class&lt;?&gt; c = Class.forName(&quot;com.fsn.demo1_类的加载.Student&quot;);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 5. 初始化某个类的子类。</span></span><br><span class="line"><span class="comment">// Zi zi = new Zi();</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 6. 直接使用java.exe命令来运行某个主类。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-类加载器："><a href="#3-类加载器：" class="headerlink" title="3.类加载器："></a>3.类加载器：</h5><p>是负责将磁盘上的某个class文件读取到内存并生成Class的对象</p>
<p>Java中有三种类加载器，它们分别用于加载不同种类的class：</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：用于加载系统类库\bin目录下的 class，例如：rt.jar。 </li>
<li> 扩展类加载器(Extension ClassLoader)：用于加载扩展类库\lib\ext目录下的 class。 </li>
<li>应用程序类加载器(Application ClassLoader)：用于加载我们自定义类的加载器。</li>
</ul>
<p>如何获取类加载器:  类的字节码对象.<code>getClassLoader()</code></p>
<h3 id="二-反射"><a href="#二-反射" class="headerlink" title="二. 反射"></a>二. 反射</h3><p>问题：IDEA中的对象是怎么知道类有哪些属性，哪些方法的呢</p>
<p>​        通过反射技术对象类进行了解剖得到了类的所有成员</p>
<h5 id="1-反射的概念"><a href="#1-反射的概念" class="headerlink" title="1.反射的概念"></a>1.反射的概念</h5><p>​        反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方 法，构造方法)</p>
<p>​        使用反射操作类成员的前提要获得该类字节码文件对象，就是Class对象</p>
<h5 id="2-反射在实际开发中的应用"><a href="#2-反射在实际开发中的应用" class="headerlink" title="2.反射在实际开发中的应用"></a>2.反射在实际开发中的应用</h5><ul>
<li>开发IDE(集成开发环境)，比如IDEA,Eclipse </li>
<li>各种框架的设计和学习 比如Spring，Hibernate，Struct，Mybaits….</li>
</ul>
<h5 id="3-Class对象的获取方式"><a href="#3-Class对象的获取方式" class="headerlink" title="3.Class对象的获取方式"></a>3.Class对象的获取方式</h5><ul>
<li>通过类名.class获得 </li>
<li>通过对象名.getClass()方法获得 </li>
<li>通过Class类的静态方法获得： static Class forName(“类全名”)</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.方式一:通过类名.class获得</span></span><br><span class="line">        Class&lt;Student&gt; c1 = Student.class;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.方式二:通过对象名.getClass()方法获得</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;? extends Student&gt; c2 = stu.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3.方式三:通过Class类的静态方法获得： static Class forName(&quot;类全名&quot;)</span></span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">&quot;com.fsn.demo2_Class对象的获取.Student&quot;</span>);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        <span class="comment">// 问题:一个类只有一个字节码对象(Class对象)</span></span><br><span class="line">        System.out.println(c1 == c2);<span class="comment">// true</span></span><br><span class="line">        System.out.println(c1 == c3);<span class="comment">// true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getSimpleName</span><span class="params">()</span></span>; 获得类名字符串：类名</span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>; 获得类全名：包名+类名</span><br><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">()</span> </span>; 创建Class对象关联类的对象</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获得Class对象</span></span><br><span class="line">    Class c = Student.class;</span><br><span class="line">    <span class="comment">// 获得类名字符串：类名</span></span><br><span class="line">    System.out.println(c.getSimpleName());</span><br><span class="line">    <span class="comment">// 获得类全名：包名+类名</span></span><br><span class="line">    System.out.println(c.getName());</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Student stu = (Student) c.newInstance();</span><br><span class="line">    System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-通过反射获取类的构造方法"><a href="#4-通过反射获取类的构造方法" class="headerlink" title="4.通过反射获取类的构造方法"></a>4.通过反射获取类的构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Constructor相关的方法</span><br><span class="line"><span class="number">1.</span> <span class="function">Constructor <span class="title">getConstructor</span><span class="params">(Class... parameterTypes)</span></span></span><br><span class="line"><span class="function">* 根据参数类型获得对应的Constructor对象。</span></span><br><span class="line"><span class="function">* 只能获得<span class="keyword">public</span>修饰的构造方法</span></span><br><span class="line"><span class="function">2. Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class... parameterTypes)</span></span></span><br><span class="line"><span class="function">* 根据参数类型获得对应的Constructor对象</span></span><br><span class="line"><span class="function">* 可以是<span class="keyword">public</span>、<span class="keyword">protected</span>、<span class="params">(默认)</span>、<span class="keyword">private</span>修饰符的构造方法。</span></span><br><span class="line"><span class="function">3. Constructor[] <span class="title">getConstructors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获得类中的所有构造方法对象，只能获得<span class="keyword">public</span>的</span></span><br><span class="line"><span class="function">4. Constructor[] <span class="title">getDeclaredConstructors</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获得类中的所有构造方法对象</span></span><br><span class="line"><span class="function">可以是<span class="keyword">public</span>、<span class="keyword">protected</span>、<span class="params">(默认)</span>、<span class="keyword">private</span>修饰符的构造方法。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h5 id="5-通过反射执行构造方法"><a href="#5-通过反射执行构造方法" class="headerlink" title="5.通过反射执行构造方法"></a>5.通过反射执行构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor对象常用方法</span><br><span class="line"><span class="number">1.</span> <span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span></span></span><br><span class="line"><span class="function">根据指定的参数创建对象</span></span><br><span class="line"><span class="function">2. <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">设置&quot;暴力反射&quot;——是否取消权限检查，<span class="keyword">true</span>取消权限检查，<span class="keyword">false</span>表示不取消</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">    <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个构造方法</span></span><br><span class="line">    <span class="comment">// 获取无参数的构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con1 = c.getDeclaredConstructor();</span><br><span class="line">    System.out.println(con1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取满参构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con2 = c.getDeclaredConstructor(String.class,</span><br><span class="line">    <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(con2);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取私有构造方法</span></span><br><span class="line">    Constructor&lt;Student&gt; con3 = c.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(con3);</span><br><span class="line">    System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有构造方法</span></span><br><span class="line">    Constructor&lt;?&gt;[] arr1 = c.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; con : arr1) &#123;</span><br><span class="line">    System.out.println(con);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con1表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu1 = con1.newInstance();</span><br><span class="line">    System.out.println(stu1);<span class="comment">// Student&#123;name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con2表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu2 = con2.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    System.out.println(stu2);<span class="comment">// Student&#123;name=&#x27;张三&#x27;, age=18&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消con3表示的构造方法的权限检查</span></span><br><span class="line">    con3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过执行con3表示的构造方法来创建Student对象</span></span><br><span class="line">    Student stu3 = con3.newInstance(<span class="number">19</span>);</span><br><span class="line">    System.out.println(stu3);<span class="comment">// Student&#123;name=&#x27;null&#x27;, age=19&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-通过反射获取类的成员方法"><a href="#6-通过反射获取类的成员方法" class="headerlink" title="6.通过反射获取类的成员方法"></a>6.通过反射获取类的成员方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Method相关的方法</span><br><span class="line">    <span class="function">Method <span class="title">getMethod</span><span class="params">(String name,Class...args)</span></span>;</span><br><span class="line">    根据方法名和参数类型获得对应的构造方法对象，只能获得<span class="keyword">public</span>的</span><br><span class="line">   </span><br><span class="line">    <span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name,Class...args)</span></span>;</span><br><span class="line">    根据方法名和参数类型获得对应的构造方法对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line">    </span><br><span class="line">    Method[] getMethods();</span><br><span class="line">    获得类中的所有成员方法对象，返回数组，只能获得<span class="keyword">public</span>修饰的且包含父类的</span><br><span class="line">    </span><br><span class="line">    Method[] getDeclaredMethods();</span><br><span class="line">    获得类中的所有成员方法对象，返回数组,只获得本类的，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、</span><br><span class="line">    <span class="keyword">private</span>的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="7-通过反射执行成员方法"><a href="#7-通过反射执行成员方法" class="headerlink" title="7.通过反射执行成员方法"></a>7.通过反射执行成员方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method对象常用方法</span><br><span class="line">    <span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">    调用指定对象obj的该方法</span></span><br><span class="line"><span class="function">    args：调用方法时传递的参数</span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">    设置&quot;暴力访问&quot;——是否取消权限检查，<span class="keyword">true</span>取消权限检查，<span class="keyword">false</span>表示不取消</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show1 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show2 方法...num: &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show3 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show4</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show1 方法...str: &quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show5</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show5 方法...num: &quot;</span> + num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个方法</span></span><br><span class="line">    <span class="comment">// 通过反射获取show1方法</span></span><br><span class="line">    Method m1 = c.getDeclaredMethod(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    System.out.println(m1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show2方法</span></span><br><span class="line">    Method m2 = c.getDeclaredMethod(<span class="string">&quot;show2&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(m2);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show3方法</span></span><br><span class="line">    Method m3 = c.getDeclaredMethod(<span class="string">&quot;show3&quot;</span>);</span><br><span class="line">    System.out.println(m3);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show4方法</span></span><br><span class="line">    Method m4 = c.getDeclaredMethod(<span class="string">&quot;show4&quot;</span>, String.class);</span><br><span class="line">    System.out.println(m4);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取show5方法</span></span><br><span class="line">    Method m5 = c.getDeclaredMethod(<span class="string">&quot;show5&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">    System.out.println(m5);</span><br><span class="line">    System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有方法</span></span><br><span class="line">    Method[] arr = c.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method m : arr) &#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射创建Student对象</span></span><br><span class="line">    Student stu = c.newInstance();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m1表示的show1方法</span></span><br><span class="line">    m1.invoke(stu);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m2表示的show2方法</span></span><br><span class="line">    m2.invoke(stu,<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消m3表示的方法的权限检查</span></span><br><span class="line">    m3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m3表示的show3方法</span></span><br><span class="line">    m3.invoke(stu);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 取消m4表示的方法的权限检查</span></span><br><span class="line">    m4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m4表示的show4方法</span></span><br><span class="line">    m4.invoke(stu,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射执行m5表示的show5方法</span></span><br><span class="line">    Object res = m5.invoke(stu, <span class="number">20</span>);<span class="comment">// int res = stu.show5(20);</span></span><br><span class="line">    System.out.println(res);<span class="comment">// 100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="8-扩展反射操作成员方法案例"><a href="#8-扩展反射操作成员方法案例" class="headerlink" title="8.扩展反射操作成员方法案例"></a>8.扩展反射操作成员方法案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Method类:</span></span><br><span class="line"><span class="comment">    public String getName() 获取方法名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 需求: 访问Student类中的成员</span></span><br><span class="line">    <span class="comment">// 1.获取该类的字节码对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">    <span class="comment">// 2.获取所有构造方法</span></span><br><span class="line">    Constructor&lt;?&gt;[] cons = c.getDeclaredConstructors();</span><br><span class="line">    <span class="comment">// 3.遍历所有的构造方法</span></span><br><span class="line">    Student stu = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; con : cons) &#123;</span><br><span class="line">    stu = (Student) con.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.获取所有的成员方法</span></span><br><span class="line">    Method[] methods = c.getDeclaredMethods();</span><br><span class="line">    <span class="comment">// 5.遍历所有的成员方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show1&quot;</span>))&#123;</span><br><span class="line">    m.invoke(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show2&quot;</span>))&#123;</span><br><span class="line">    m.invoke(stu,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;show5&quot;</span>))&#123;</span><br><span class="line">    Object res = m.invoke(stu, <span class="number">20</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="9-通过反射操作成员变量"><a href="#9-通过反射操作成员变量" class="headerlink" title="9.通过反射操作成员变量"></a>9.通过反射操作成员变量</h5><p>通过反射获取类的成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class类中与Field相关的方法</span><br><span class="line">* <span class="function">Field <span class="title">getField</span><span class="params">(String name)</span></span>;</span><br><span class="line">* 根据成员变量名获得对应Field对象，只能获得<span class="keyword">public</span>修饰</span><br><span class="line">* <span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span>;</span><br><span class="line">* 根据成员变量名获得对应Field对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line">* Field[] getFields();</span><br><span class="line">* 获得所有的成员变量对应的Field对象，只能获得<span class="keyword">public</span>的</span><br><span class="line">* Field[] getDeclaredFields();</span><br><span class="line">* 获得所有的成员变量对应的Field对象，包括<span class="keyword">public</span>、<span class="keyword">protected</span>、(默认)、<span class="keyword">private</span>的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过反射访问成员变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field对象常用方法</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setInt</span><span class="params">(Object obj, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLong</span><span class="params">(Object obj, <span class="keyword">long</span> l)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBoolean</span><span class="params">(Object obj, <span class="keyword">boolean</span> z)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDouble</span><span class="params">(Object obj, <span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLong</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(Object ob)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span></span>;暴力反射，设置为可以直接访问私有类型的属性。</span><br><span class="line"><span class="function">Class <span class="title">getType</span><span class="params">()</span></span>; 获取属性的类型，返回Class对象。</span><br><span class="line"><span class="comment">//setXxx方法都是给对象obj的属性设置使用，针对不同的类型选取不同的方法。</span></span><br><span class="line"><span class="comment">//getXxx方法是获取对象obj对应的属性值的，针对不同的类型选取不同的方法。</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 获取Student类的Class对象</span></span><br><span class="line">    Class&lt;Student&gt; c = Student.class;</span><br><span class="line">    Student stu = c.newInstance();</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取单个的成员变量</span></span><br><span class="line">    <span class="comment">// 通过反射获取name成员变量</span></span><br><span class="line">    Field f1 = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(f1);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射获取age成员变量</span></span><br><span class="line">    Field f2 = c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(f2);</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 获取所有成员变量</span></span><br><span class="line">    Field[] arr = c.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : arr) &#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取f1表示的name属性的类型</span></span><br><span class="line">    System.out.println(f1.getType());</span><br><span class="line">    <span class="comment">// 获取f2表示的age属性的类型</span></span><br><span class="line">    System.out.println(f2.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过反射给f1表示的name属性赋值</span></span><br><span class="line">    f1.set(stu,<span class="string">&quot;张三&quot;</span> );<span class="comment">// 相当于stu.name=&quot;张三&quot;;</span></span><br><span class="line">    <span class="comment">// 取消f2表示的属性的权限检查</span></span><br><span class="line">    f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 通过反射给f2表示的age属性赋值</span></span><br><span class="line">    f2.set(stu,<span class="number">18</span> );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    <span class="comment">// 通过反射获取f1表示的name属性的值</span></span><br><span class="line">    System.out.println(f1.get(stu));<span class="comment">// 张三</span></span><br><span class="line">    <span class="comment">// 通过反射获取f2表示的age属性的值</span></span><br><span class="line">    System.out.println(f2.get(stu));<span class="comment">// 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
</search>
